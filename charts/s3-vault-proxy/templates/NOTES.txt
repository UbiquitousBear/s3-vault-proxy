1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "s3-vault-proxy.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "s3-vault-proxy.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "s3-vault-proxy.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "s3-vault-proxy.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the service health:
  curl http://localhost:{{ .Values.service.port }}/health

3. Check service readiness (validates Vault connectivity):
  curl http://localhost:{{ .Values.service.port }}/ready

4. Get build and version information:
  curl http://localhost:{{ .Values.service.port }}/version

5. Configure your S3 client to use the proxy:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  export S3_ENDPOINT="http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}"
{{- end }}
{{- else }}
  export S3_ENDPOINT="http://localhost:{{ .Values.service.port }}"
{{- end }}

6. Example AWS CLI usage with encryption:
  aws s3 cp myfile.txt s3://mybucket/mykey \
    --endpoint-url $S3_ENDPOINT \
    --sse aws:kms \
    --sse-kms-key-id arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012

7. Monitor logs:
  kubectl logs --namespace {{ .Release.Namespace }} -l "{{ include "s3-vault-proxy.selectorLabels" . }}" -f

Configuration Notes:
- Vault Address: {{ .Values.config.vault.addr }}
- S3 Backend: {{ .Values.config.s3.endpoint }}
- Log Level: {{ .Values.config.logging.level }}
- Log Format: {{ .Values.config.logging.format }}

{{- if not .Values.secrets.vaultToken.enabled }}
  WARNING: No Vault token configured! Please set either:
   - secrets.vaultToken.enabled=true with a token value
   - Use an existing secret with secrets.vaultToken.existingSecret
   - Ensure VAULT_TOKEN environment variable is available to pods
{{- end }}

{{- if eq .Values.config.logging.level "debug" }}
  DEBUG logging is enabled - consider using 'info' or 'warn' for production
{{- end }}

For more information, visit: https://github.com/UbiquitousBear/s3-vault-proxy